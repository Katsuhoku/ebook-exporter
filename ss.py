import eel
import pyautogui
import tkinter as tk
from tkinter import filedialog
from PIL import Image
from time import sleep
from sys import exit
from os import listdir
from os.path import isfile, join

WINDOW_WIDTH, WINDOW_HEIGHT = 600,800
screenWidth, screenHeight = pyautogui.size()

eel.init('web')

def close_callback(route, websockets):
    if not websockets:
        exit()
        
@eel.expose
def log(msg: str):
    print(msg)
    

@eel.expose
def select_folder():
    """
    Shows a system File Explorer dialog to select the desired folder where
    the exported book will be saved.
    @return: The path the user selected in the dialog.
    """
    root = tk.Tk()
    root.withdraw()
    path = filedialog.askdirectory()
    return path

@eel.expose
def capture(pages: int, folder: str):
    """
    For every page defined in the argument, takes a screenshot within the
    region of a single page in the middle of the screen, then exports it
    as a PNG image to the specified folder.

    It uses pyautogui to move the cursor on the screen automatically, so
    during the capture process is recomended to not move the mouse.
    The name of the pages is just a numeration.

    @param pages: The number of pages to export.
    @param folder: The path of the folder where the pages will be saved.
    """
    pyautogui.moveTo(screenWidth / 2, screenHeight / 2)
    pyautogui.click()
    sleep(2)
    pyautogui.click()
    pyautogui.moveTo(100,600)
    for i in range(pages):
        left = int(screenWidth * 58/200)
        top = 0
        right = int(screenWidth * 84/200)
        bottom = screenHeight

        ss = pyautogui.screenshot(region=(left, top, right, bottom))
        num = ''
        if i < 100: num += '0'
        if i < 10: num += '0'
        ss.save(f'{folder}/{num + str(i)}.png')

        sleep(2)
        pyautogui.click()
        
    return 1

@eel.expose
def export_pdf(folder: str):
    """
    Creates a PDF file from all the images in the specified folder.

    It's use is intended to be for a new folder created only for the
    images generated by the capture function. It doesn't distinguish
    between other images and the ones taken by capture. Also, it takes
    them in alphabetical order.

    The resulting PDF will be named just "book.pdf".

    @param folder: The folder where the images are located.
    """
    raw = [join(folder,f) for f in listdir(folder) if isfile(join(folder, f)) and f.split('.')[-1].lower() == 'png']
    image = Image.open(raw[1])
    rgb = image.convert('RGB')
    imglist = []
    for img in raw[2:]:
        imglist.append(Image.open(img).convert('RGB'))
    
    outfn = f'{folder}/book.pdf'
    rgb.save(outfn, save_all=True, append_images=imglist)
    return 2

eel.start('index.html', size=(WINDOW_WIDTH, WINDOW_HEIGHT), close_callback=close_callback)